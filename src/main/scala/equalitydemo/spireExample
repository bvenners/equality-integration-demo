import spire.algebra._
import spire.math._
import spire.implicits._
1L === 1
1 === 1L


import spire.algebra._
import spire.math._
import spire.implicits.{eqOps => _, _}

import org.scalactic._
import org.scalatest._
import scala.language.implicitConversions

class SpireEqualizer[L](val leftSide: L) {
  def ===[R](rightSide: R)(implicit constraint: Constraint[L, R]): Boolean = constraint.areEqual(leftSide, rightSide)
  def !==[R](rightSide: R)(implicit constraint: Constraint[L, R]): Boolean = !constraint.areEqual(leftSide, rightSide)
}
final class AToBSpireConstraint[A, B](equivalenceOfB: Eq[B], cnv: A => B) extends Constraint[A, B] {
  override def areEqual(a: A, b: B): Boolean = equivalenceOfB.eqv(cnv(a), b)
}
final class BToASpireConstraint[A, B](equivalenceOfA: Eq[A], cnv: B => A) extends Constraint[A, B] {
  override def areEqual(a: A, b: B): Boolean = equivalenceOfA.eqv(a, cnv(b))
}

trait LowPrioritySpireConstraints extends TripleEquals {
  implicit def lowPrioritySpireConstraint[A, B](implicit equivalenceOfB: Eq[B], ev: A => B): Constraint[A, B] = new AToBSpireConstraint[A, B](equivalenceOfB, ev)
}

trait SpireEquality extends LowPrioritySpireConstraints {
  override def convertToEqualizer[T](left: T): Equalizer[T] = super.convertToEqualizer[T](left)
  override def unconstrainedEquality[A, B](implicit equalityOfA: Equality[A]): Constraint[A, B] = super.unconstrainedEquality[A, B]
  implicit def convertToSpireEqualizer[T](left: T): SpireEqualizer[T] = new SpireEqualizer(left)
  implicit def spireConstraint[A, B](implicit equivalenceOfA: Eq[A], ev: B => A): Constraint[A, B] = new BToASpireConstraint[A, B](equivalenceOfA, ev)
}

object SpireEquality extends SpireEquality

object SpireMatchers extends MustMatchers with SpireEquality

val n1 = r"1/3"

val n2 = r"1599/115866"

import SpireEquality._

n1 === n2
1 === 2

n1 should === (n2)


